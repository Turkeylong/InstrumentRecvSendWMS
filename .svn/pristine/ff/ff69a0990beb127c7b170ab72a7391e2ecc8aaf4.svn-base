package com.rfid.instrument.activity;

import android.app.Activity;
import android.app.FragmentManager;
import android.app.FragmentTransaction;
import android.content.Context;
import android.content.Intent;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.Bitmap;
import android.os.Bundle;
import android.os.Handler;
import android.util.AttributeSet;
import android.util.DisplayMetrics;
import android.view.View;
import android.view.Window;
import android.widget.ListView;
import android.widget.Toast;

import com.rfid.instrument.R;
import com.rfid.instrument.fragment.ContentFragment;
import com.rfid.instrument.fragment.HeaderFragment;
import com.rfid.instrument.util.BitmapUtil;
import com.rfid.instrument.util.Commission;
import com.rfid.instrument.util.PublicUtil;

public class MainActivity extends Activity {
	private HeaderFragment fragHeader;
	private ContentFragment fragContent;
	private Activity activity;
	private Handler handler;
	private ListView header_listview;
	private Commission order = new Commission();
	@Override
	protected void onCreate(Bundle savedInstanceState) 
	{
		// TODO 自动生成的方法存根
		super.onCreate(savedInstanceState);
		requestWindowFeature(Window.FEATURE_NO_TITLE);
		setContentView(R.layout.activity_main);
		activity = this;
		handler = new Handler();
		// 设置默认的Fragment
		setDefaultFragment();
		// 创建了一个DatabaseHelper对象，只执行这句话是不会创建或打开连接的  
        //DatabaseHelper dbHelper = new DatabaseHelper(MainActivity.this,"/sdcard/Download/test.db");  
        // 只有调用了DatabaseHelper的getWritableDatabase()方法或者getReadableDatabase()方法之后，才会创建或打开一个连接  
        //SQLiteDatabase sqliteDatabase = dbHelper.getWritableDatabase();//getReadableDatabase();
	}

	@Override
	protected void onStart() {
		// TODO 自动生成的方法存根
		super.onStart();
		initHeaderData();
	}

	@Override
	public View onCreateView(View parent, String name, Context context,
			AttributeSet attrs) {
		// TODO 自动生成的方法存根
		return super.onCreateView(parent, name, context, attrs);
	}

	@Override
	protected void onSaveInstanceState(Bundle outState) {
		// TODO 自动生成的方法存根
		//super.onSaveInstanceState(outState);
	}

	private void setDefaultFragment() {
		// TODO 自动生成的方法存根

		FragmentManager fm = getFragmentManager();
		FragmentTransaction transaction = fm.beginTransaction();
		fragHeader = new HeaderFragment();
		transaction.replace(R.id.fragment_header, fragHeader,"headerFragment");
		transaction.commit();
		if(PublicUtil.width > PublicUtil.height)
		{
			FragmentManager cont = getFragmentManager();
			FragmentTransaction cont_transaction = cont.beginTransaction();
			fragContent = new ContentFragment();
			cont_transaction.replace(R.id.fragment_container, fragContent,"contentFragment");
			cont_transaction.commit();
		}
	}
	
	private void initHeaderData() {
		// TODO 自动生成的方法存根
		super.onStart();
		Intent intent = getIntent();
		order = (Commission) intent.getSerializableExtra("CommitInfo");
	}
	
	public Commission getCommit()
	{
		return order;
	}
}
